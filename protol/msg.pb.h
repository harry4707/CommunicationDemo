// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace LOGCXX {
class BatchHeader;
class BatchHeaderDefaultTypeInternal;
extern BatchHeaderDefaultTypeInternal _BatchHeader_default_instance_;
class MsgHeader;
class MsgHeaderDefaultTypeInternal;
extern MsgHeaderDefaultTypeInternal _MsgHeader_default_instance_;
class MsgLog;
class MsgLogDefaultTypeInternal;
extern MsgLogDefaultTypeInternal _MsgLog_default_instance_;
class MsgLogBatch;
class MsgLogBatchDefaultTypeInternal;
extern MsgLogBatchDefaultTypeInternal _MsgLogBatch_default_instance_;
class MsgLog_KeyValue;
class MsgLog_KeyValueDefaultTypeInternal;
extern MsgLog_KeyValueDefaultTypeInternal _MsgLog_KeyValue_default_instance_;
}  // namespace LOGCXX
PROTOBUF_NAMESPACE_OPEN
template<> ::LOGCXX::BatchHeader* Arena::CreateMaybeMessage<::LOGCXX::BatchHeader>(Arena*);
template<> ::LOGCXX::MsgHeader* Arena::CreateMaybeMessage<::LOGCXX::MsgHeader>(Arena*);
template<> ::LOGCXX::MsgLog* Arena::CreateMaybeMessage<::LOGCXX::MsgLog>(Arena*);
template<> ::LOGCXX::MsgLogBatch* Arena::CreateMaybeMessage<::LOGCXX::MsgLogBatch>(Arena*);
template<> ::LOGCXX::MsgLog_KeyValue* Arena::CreateMaybeMessage<::LOGCXX::MsgLog_KeyValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LOGCXX {

// ===================================================================

class MsgLogBatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOGCXX.MsgLogBatch) */ {
 public:
  inline MsgLogBatch() : MsgLogBatch(nullptr) {}
  virtual ~MsgLogBatch();

  MsgLogBatch(const MsgLogBatch& from);
  MsgLogBatch(MsgLogBatch&& from) noexcept
    : MsgLogBatch() {
    *this = ::std::move(from);
  }

  inline MsgLogBatch& operator=(const MsgLogBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgLogBatch& operator=(MsgLogBatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgLogBatch& default_instance();

  static inline const MsgLogBatch* internal_default_instance() {
    return reinterpret_cast<const MsgLogBatch*>(
               &_MsgLogBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgLogBatch& a, MsgLogBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgLogBatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgLogBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgLogBatch* New() const final {
    return CreateMaybeMessage<MsgLogBatch>(nullptr);
  }

  MsgLogBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgLogBatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgLogBatch& from);
  void MergeFrom(const MsgLogBatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgLogBatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOGCXX.MsgLogBatch";
  }
  protected:
  explicit MsgLogBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgLogsFieldNumber = 2,
    kBatchHeaderFieldNumber = 1,
  };
  // repeated .LOGCXX.MsgLog msgLogs = 2;
  int msglogs_size() const;
  private:
  int _internal_msglogs_size() const;
  public:
  void clear_msglogs();
  ::LOGCXX::MsgLog* mutable_msglogs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOGCXX::MsgLog >*
      mutable_msglogs();
  private:
  const ::LOGCXX::MsgLog& _internal_msglogs(int index) const;
  ::LOGCXX::MsgLog* _internal_add_msglogs();
  public:
  const ::LOGCXX::MsgLog& msglogs(int index) const;
  ::LOGCXX::MsgLog* add_msglogs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOGCXX::MsgLog >&
      msglogs() const;

  // .LOGCXX.BatchHeader batchHeader = 1;
  bool has_batchheader() const;
  private:
  bool _internal_has_batchheader() const;
  public:
  void clear_batchheader();
  const ::LOGCXX::BatchHeader& batchheader() const;
  ::LOGCXX::BatchHeader* release_batchheader();
  ::LOGCXX::BatchHeader* mutable_batchheader();
  void set_allocated_batchheader(::LOGCXX::BatchHeader* batchheader);
  private:
  const ::LOGCXX::BatchHeader& _internal_batchheader() const;
  ::LOGCXX::BatchHeader* _internal_mutable_batchheader();
  public:
  void unsafe_arena_set_allocated_batchheader(
      ::LOGCXX::BatchHeader* batchheader);
  ::LOGCXX::BatchHeader* unsafe_arena_release_batchheader();

  // @@protoc_insertion_point(class_scope:LOGCXX.MsgLogBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOGCXX::MsgLog > msglogs_;
  ::LOGCXX::BatchHeader* batchheader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BatchHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOGCXX.BatchHeader) */ {
 public:
  inline BatchHeader() : BatchHeader(nullptr) {}
  virtual ~BatchHeader();

  BatchHeader(const BatchHeader& from);
  BatchHeader(BatchHeader&& from) noexcept
    : BatchHeader() {
    *this = ::std::move(from);
  }

  inline BatchHeader& operator=(const BatchHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchHeader& operator=(BatchHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchHeader& default_instance();

  static inline const BatchHeader* internal_default_instance() {
    return reinterpret_cast<const BatchHeader*>(
               &_BatchHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BatchHeader& a, BatchHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchHeader* New() const final {
    return CreateMaybeMessage<BatchHeader>(nullptr);
  }

  BatchHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchHeader& from);
  void MergeFrom(const BatchHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOGCXX.BatchHeader";
  }
  protected:
  explicit BatchHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskNameFieldNumber = 1,
    kLanguageFieldNumber = 2,
    kClusterFieldNumber = 3,
    kPsmFieldNumber = 4,
    kPodNameFieldNumber = 5,
    kStageFieldNumber = 6,
    kHostFieldNumber = 7,
    kIdcFieldNumber = 8,
  };
  // string taskName = 1;
  void clear_taskname();
  const std::string& taskname() const;
  void set_taskname(const std::string& value);
  void set_taskname(std::string&& value);
  void set_taskname(const char* value);
  void set_taskname(const char* value, size_t size);
  std::string* mutable_taskname();
  std::string* release_taskname();
  void set_allocated_taskname(std::string* taskname);
  private:
  const std::string& _internal_taskname() const;
  void _internal_set_taskname(const std::string& value);
  std::string* _internal_mutable_taskname();
  public:

  // string language = 2;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string cluster = 3;
  void clear_cluster();
  const std::string& cluster() const;
  void set_cluster(const std::string& value);
  void set_cluster(std::string&& value);
  void set_cluster(const char* value);
  void set_cluster(const char* value, size_t size);
  std::string* mutable_cluster();
  std::string* release_cluster();
  void set_allocated_cluster(std::string* cluster);
  private:
  const std::string& _internal_cluster() const;
  void _internal_set_cluster(const std::string& value);
  std::string* _internal_mutable_cluster();
  public:

  // string psm = 4;
  void clear_psm();
  const std::string& psm() const;
  void set_psm(const std::string& value);
  void set_psm(std::string&& value);
  void set_psm(const char* value);
  void set_psm(const char* value, size_t size);
  std::string* mutable_psm();
  std::string* release_psm();
  void set_allocated_psm(std::string* psm);
  private:
  const std::string& _internal_psm() const;
  void _internal_set_psm(const std::string& value);
  std::string* _internal_mutable_psm();
  public:

  // string podName = 5;
  void clear_podname();
  const std::string& podname() const;
  void set_podname(const std::string& value);
  void set_podname(std::string&& value);
  void set_podname(const char* value);
  void set_podname(const char* value, size_t size);
  std::string* mutable_podname();
  std::string* release_podname();
  void set_allocated_podname(std::string* podname);
  private:
  const std::string& _internal_podname() const;
  void _internal_set_podname(const std::string& value);
  std::string* _internal_mutable_podname();
  public:

  // string stage = 6;
  void clear_stage();
  const std::string& stage() const;
  void set_stage(const std::string& value);
  void set_stage(std::string&& value);
  void set_stage(const char* value);
  void set_stage(const char* value, size_t size);
  std::string* mutable_stage();
  std::string* release_stage();
  void set_allocated_stage(std::string* stage);
  private:
  const std::string& _internal_stage() const;
  void _internal_set_stage(const std::string& value);
  std::string* _internal_mutable_stage();
  public:

  // bytes host = 7;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const void* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string idc = 8;
  void clear_idc();
  const std::string& idc() const;
  void set_idc(const std::string& value);
  void set_idc(std::string&& value);
  void set_idc(const char* value);
  void set_idc(const char* value, size_t size);
  std::string* mutable_idc();
  std::string* release_idc();
  void set_allocated_idc(std::string* idc);
  private:
  const std::string& _internal_idc() const;
  void _internal_set_idc(const std::string& value);
  std::string* _internal_mutable_idc();
  public:

  // @@protoc_insertion_point(class_scope:LOGCXX.BatchHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cluster_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr psm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr podname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MsgLog_KeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOGCXX.MsgLog.KeyValue) */ {
 public:
  inline MsgLog_KeyValue() : MsgLog_KeyValue(nullptr) {}
  virtual ~MsgLog_KeyValue();

  MsgLog_KeyValue(const MsgLog_KeyValue& from);
  MsgLog_KeyValue(MsgLog_KeyValue&& from) noexcept
    : MsgLog_KeyValue() {
    *this = ::std::move(from);
  }

  inline MsgLog_KeyValue& operator=(const MsgLog_KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgLog_KeyValue& operator=(MsgLog_KeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgLog_KeyValue& default_instance();

  static inline const MsgLog_KeyValue* internal_default_instance() {
    return reinterpret_cast<const MsgLog_KeyValue*>(
               &_MsgLog_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgLog_KeyValue& a, MsgLog_KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgLog_KeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgLog_KeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgLog_KeyValue* New() const final {
    return CreateMaybeMessage<MsgLog_KeyValue>(nullptr);
  }

  MsgLog_KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgLog_KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgLog_KeyValue& from);
  void MergeFrom(const MsgLog_KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgLog_KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOGCXX.MsgLog.KeyValue";
  }
  protected:
  explicit MsgLog_KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:LOGCXX.MsgLog.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MsgLog PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOGCXX.MsgLog) */ {
 public:
  inline MsgLog() : MsgLog(nullptr) {}
  virtual ~MsgLog();

  MsgLog(const MsgLog& from);
  MsgLog(MsgLog&& from) noexcept
    : MsgLog() {
    *this = ::std::move(from);
  }

  inline MsgLog& operator=(const MsgLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgLog& operator=(MsgLog&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgLog& default_instance();

  static inline const MsgLog* internal_default_instance() {
    return reinterpret_cast<const MsgLog*>(
               &_MsgLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgLog& a, MsgLog& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgLog* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgLog* New() const final {
    return CreateMaybeMessage<MsgLog>(nullptr);
  }

  MsgLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgLog& from);
  void MergeFrom(const MsgLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOGCXX.MsgLog";
  }
  protected:
  explicit MsgLog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MsgLog_KeyValue KeyValue;

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kMsgFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // repeated .LOGCXX.MsgLog.KeyValue tags = 2;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::LOGCXX::MsgLog_KeyValue* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOGCXX::MsgLog_KeyValue >*
      mutable_tags();
  private:
  const ::LOGCXX::MsgLog_KeyValue& _internal_tags(int index) const;
  ::LOGCXX::MsgLog_KeyValue* _internal_add_tags();
  public:
  const ::LOGCXX::MsgLog_KeyValue& tags(int index) const;
  ::LOGCXX::MsgLog_KeyValue* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOGCXX::MsgLog_KeyValue >&
      tags() const;

  // bytes msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .LOGCXX.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::LOGCXX::MsgHeader& header() const;
  ::LOGCXX::MsgHeader* release_header();
  ::LOGCXX::MsgHeader* mutable_header();
  void set_allocated_header(::LOGCXX::MsgHeader* header);
  private:
  const ::LOGCXX::MsgHeader& _internal_header() const;
  ::LOGCXX::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::LOGCXX::MsgHeader* header);
  ::LOGCXX::MsgHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:LOGCXX.MsgLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOGCXX::MsgLog_KeyValue > tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::LOGCXX::MsgHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MsgHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOGCXX.MsgHeader) */ {
 public:
  inline MsgHeader() : MsgHeader(nullptr) {}
  virtual ~MsgHeader();

  MsgHeader(const MsgHeader& from);
  MsgHeader(MsgHeader&& from) noexcept
    : MsgHeader() {
    *this = ::std::move(from);
  }

  inline MsgHeader& operator=(const MsgHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgHeader& operator=(MsgHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgHeader& default_instance();

  static inline const MsgHeader* internal_default_instance() {
    return reinterpret_cast<const MsgHeader*>(
               &_MsgHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgHeader& a, MsgHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgHeader* New() const final {
    return CreateMaybeMessage<MsgHeader>(nullptr);
  }

  MsgHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgHeader& from);
  void MergeFrom(const MsgHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOGCXX.MsgHeader";
  }
  protected:
  explicit MsgHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kLocationFieldNumber = 2,
    kLogIDFieldNumber = 3,
    kTsFieldNumber = 4,
    kSpanIDFieldNumber = 5,
  };
  // string level = 1;
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // string location = 2;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string logID = 3;
  void clear_logid();
  const std::string& logid() const;
  void set_logid(const std::string& value);
  void set_logid(std::string&& value);
  void set_logid(const char* value);
  void set_logid(const char* value, size_t size);
  std::string* mutable_logid();
  std::string* release_logid();
  void set_allocated_logid(std::string* logid);
  private:
  const std::string& _internal_logid() const;
  void _internal_set_logid(const std::string& value);
  std::string* _internal_mutable_logid();
  public:

  // int64 ts = 4;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 spanID = 5;
  void clear_spanid();
  ::PROTOBUF_NAMESPACE_ID::uint64 spanid() const;
  void set_spanid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_spanid() const;
  void _internal_set_spanid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:LOGCXX.MsgHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logid_;
  ::PROTOBUF_NAMESPACE_ID::int64 ts_;
  ::PROTOBUF_NAMESPACE_ID::uint64 spanid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgLogBatch

// .LOGCXX.BatchHeader batchHeader = 1;
inline bool MsgLogBatch::_internal_has_batchheader() const {
  return this != internal_default_instance() && batchheader_ != nullptr;
}
inline bool MsgLogBatch::has_batchheader() const {
  return _internal_has_batchheader();
}
inline void MsgLogBatch::clear_batchheader() {
  if (GetArena() == nullptr && batchheader_ != nullptr) {
    delete batchheader_;
  }
  batchheader_ = nullptr;
}
inline const ::LOGCXX::BatchHeader& MsgLogBatch::_internal_batchheader() const {
  const ::LOGCXX::BatchHeader* p = batchheader_;
  return p != nullptr ? *p : reinterpret_cast<const ::LOGCXX::BatchHeader&>(
      ::LOGCXX::_BatchHeader_default_instance_);
}
inline const ::LOGCXX::BatchHeader& MsgLogBatch::batchheader() const {
  // @@protoc_insertion_point(field_get:LOGCXX.MsgLogBatch.batchHeader)
  return _internal_batchheader();
}
inline void MsgLogBatch::unsafe_arena_set_allocated_batchheader(
    ::LOGCXX::BatchHeader* batchheader) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(batchheader_);
  }
  batchheader_ = batchheader;
  if (batchheader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOGCXX.MsgLogBatch.batchHeader)
}
inline ::LOGCXX::BatchHeader* MsgLogBatch::release_batchheader() {
  
  ::LOGCXX::BatchHeader* temp = batchheader_;
  batchheader_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LOGCXX::BatchHeader* MsgLogBatch::unsafe_arena_release_batchheader() {
  // @@protoc_insertion_point(field_release:LOGCXX.MsgLogBatch.batchHeader)
  
  ::LOGCXX::BatchHeader* temp = batchheader_;
  batchheader_ = nullptr;
  return temp;
}
inline ::LOGCXX::BatchHeader* MsgLogBatch::_internal_mutable_batchheader() {
  
  if (batchheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::LOGCXX::BatchHeader>(GetArena());
    batchheader_ = p;
  }
  return batchheader_;
}
inline ::LOGCXX::BatchHeader* MsgLogBatch::mutable_batchheader() {
  // @@protoc_insertion_point(field_mutable:LOGCXX.MsgLogBatch.batchHeader)
  return _internal_mutable_batchheader();
}
inline void MsgLogBatch::set_allocated_batchheader(::LOGCXX::BatchHeader* batchheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete batchheader_;
  }
  if (batchheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(batchheader);
    if (message_arena != submessage_arena) {
      batchheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batchheader, submessage_arena);
    }
    
  } else {
    
  }
  batchheader_ = batchheader;
  // @@protoc_insertion_point(field_set_allocated:LOGCXX.MsgLogBatch.batchHeader)
}

// repeated .LOGCXX.MsgLog msgLogs = 2;
inline int MsgLogBatch::_internal_msglogs_size() const {
  return msglogs_.size();
}
inline int MsgLogBatch::msglogs_size() const {
  return _internal_msglogs_size();
}
inline void MsgLogBatch::clear_msglogs() {
  msglogs_.Clear();
}
inline ::LOGCXX::MsgLog* MsgLogBatch::mutable_msglogs(int index) {
  // @@protoc_insertion_point(field_mutable:LOGCXX.MsgLogBatch.msgLogs)
  return msglogs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOGCXX::MsgLog >*
MsgLogBatch::mutable_msglogs() {
  // @@protoc_insertion_point(field_mutable_list:LOGCXX.MsgLogBatch.msgLogs)
  return &msglogs_;
}
inline const ::LOGCXX::MsgLog& MsgLogBatch::_internal_msglogs(int index) const {
  return msglogs_.Get(index);
}
inline const ::LOGCXX::MsgLog& MsgLogBatch::msglogs(int index) const {
  // @@protoc_insertion_point(field_get:LOGCXX.MsgLogBatch.msgLogs)
  return _internal_msglogs(index);
}
inline ::LOGCXX::MsgLog* MsgLogBatch::_internal_add_msglogs() {
  return msglogs_.Add();
}
inline ::LOGCXX::MsgLog* MsgLogBatch::add_msglogs() {
  // @@protoc_insertion_point(field_add:LOGCXX.MsgLogBatch.msgLogs)
  return _internal_add_msglogs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOGCXX::MsgLog >&
MsgLogBatch::msglogs() const {
  // @@protoc_insertion_point(field_list:LOGCXX.MsgLogBatch.msgLogs)
  return msglogs_;
}

// -------------------------------------------------------------------

// BatchHeader

// string taskName = 1;
inline void BatchHeader::clear_taskname() {
  taskname_.ClearToEmpty();
}
inline const std::string& BatchHeader::taskname() const {
  // @@protoc_insertion_point(field_get:LOGCXX.BatchHeader.taskName)
  return _internal_taskname();
}
inline void BatchHeader::set_taskname(const std::string& value) {
  _internal_set_taskname(value);
  // @@protoc_insertion_point(field_set:LOGCXX.BatchHeader.taskName)
}
inline std::string* BatchHeader::mutable_taskname() {
  // @@protoc_insertion_point(field_mutable:LOGCXX.BatchHeader.taskName)
  return _internal_mutable_taskname();
}
inline const std::string& BatchHeader::_internal_taskname() const {
  return taskname_.Get();
}
inline void BatchHeader::_internal_set_taskname(const std::string& value) {
  
  taskname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BatchHeader::set_taskname(std::string&& value) {
  
  taskname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOGCXX.BatchHeader.taskName)
}
inline void BatchHeader::set_taskname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LOGCXX.BatchHeader.taskName)
}
inline void BatchHeader::set_taskname(const char* value,
    size_t size) {
  
  taskname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOGCXX.BatchHeader.taskName)
}
inline std::string* BatchHeader::_internal_mutable_taskname() {
  
  return taskname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BatchHeader::release_taskname() {
  // @@protoc_insertion_point(field_release:LOGCXX.BatchHeader.taskName)
  return taskname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchHeader::set_allocated_taskname(std::string* taskname) {
  if (taskname != nullptr) {
    
  } else {
    
  }
  taskname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOGCXX.BatchHeader.taskName)
}

// string language = 2;
inline void BatchHeader::clear_language() {
  language_.ClearToEmpty();
}
inline const std::string& BatchHeader::language() const {
  // @@protoc_insertion_point(field_get:LOGCXX.BatchHeader.language)
  return _internal_language();
}
inline void BatchHeader::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:LOGCXX.BatchHeader.language)
}
inline std::string* BatchHeader::mutable_language() {
  // @@protoc_insertion_point(field_mutable:LOGCXX.BatchHeader.language)
  return _internal_mutable_language();
}
inline const std::string& BatchHeader::_internal_language() const {
  return language_.Get();
}
inline void BatchHeader::_internal_set_language(const std::string& value) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BatchHeader::set_language(std::string&& value) {
  
  language_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOGCXX.BatchHeader.language)
}
inline void BatchHeader::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LOGCXX.BatchHeader.language)
}
inline void BatchHeader::set_language(const char* value,
    size_t size) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOGCXX.BatchHeader.language)
}
inline std::string* BatchHeader::_internal_mutable_language() {
  
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BatchHeader::release_language() {
  // @@protoc_insertion_point(field_release:LOGCXX.BatchHeader.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchHeader::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOGCXX.BatchHeader.language)
}

// string cluster = 3;
inline void BatchHeader::clear_cluster() {
  cluster_.ClearToEmpty();
}
inline const std::string& BatchHeader::cluster() const {
  // @@protoc_insertion_point(field_get:LOGCXX.BatchHeader.cluster)
  return _internal_cluster();
}
inline void BatchHeader::set_cluster(const std::string& value) {
  _internal_set_cluster(value);
  // @@protoc_insertion_point(field_set:LOGCXX.BatchHeader.cluster)
}
inline std::string* BatchHeader::mutable_cluster() {
  // @@protoc_insertion_point(field_mutable:LOGCXX.BatchHeader.cluster)
  return _internal_mutable_cluster();
}
inline const std::string& BatchHeader::_internal_cluster() const {
  return cluster_.Get();
}
inline void BatchHeader::_internal_set_cluster(const std::string& value) {
  
  cluster_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BatchHeader::set_cluster(std::string&& value) {
  
  cluster_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOGCXX.BatchHeader.cluster)
}
inline void BatchHeader::set_cluster(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LOGCXX.BatchHeader.cluster)
}
inline void BatchHeader::set_cluster(const char* value,
    size_t size) {
  
  cluster_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOGCXX.BatchHeader.cluster)
}
inline std::string* BatchHeader::_internal_mutable_cluster() {
  
  return cluster_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BatchHeader::release_cluster() {
  // @@protoc_insertion_point(field_release:LOGCXX.BatchHeader.cluster)
  return cluster_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchHeader::set_allocated_cluster(std::string* cluster) {
  if (cluster != nullptr) {
    
  } else {
    
  }
  cluster_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cluster,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOGCXX.BatchHeader.cluster)
}

// string psm = 4;
inline void BatchHeader::clear_psm() {
  psm_.ClearToEmpty();
}
inline const std::string& BatchHeader::psm() const {
  // @@protoc_insertion_point(field_get:LOGCXX.BatchHeader.psm)
  return _internal_psm();
}
inline void BatchHeader::set_psm(const std::string& value) {
  _internal_set_psm(value);
  // @@protoc_insertion_point(field_set:LOGCXX.BatchHeader.psm)
}
inline std::string* BatchHeader::mutable_psm() {
  // @@protoc_insertion_point(field_mutable:LOGCXX.BatchHeader.psm)
  return _internal_mutable_psm();
}
inline const std::string& BatchHeader::_internal_psm() const {
  return psm_.Get();
}
inline void BatchHeader::_internal_set_psm(const std::string& value) {
  
  psm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BatchHeader::set_psm(std::string&& value) {
  
  psm_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOGCXX.BatchHeader.psm)
}
inline void BatchHeader::set_psm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  psm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LOGCXX.BatchHeader.psm)
}
inline void BatchHeader::set_psm(const char* value,
    size_t size) {
  
  psm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOGCXX.BatchHeader.psm)
}
inline std::string* BatchHeader::_internal_mutable_psm() {
  
  return psm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BatchHeader::release_psm() {
  // @@protoc_insertion_point(field_release:LOGCXX.BatchHeader.psm)
  return psm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchHeader::set_allocated_psm(std::string* psm) {
  if (psm != nullptr) {
    
  } else {
    
  }
  psm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), psm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOGCXX.BatchHeader.psm)
}

// string podName = 5;
inline void BatchHeader::clear_podname() {
  podname_.ClearToEmpty();
}
inline const std::string& BatchHeader::podname() const {
  // @@protoc_insertion_point(field_get:LOGCXX.BatchHeader.podName)
  return _internal_podname();
}
inline void BatchHeader::set_podname(const std::string& value) {
  _internal_set_podname(value);
  // @@protoc_insertion_point(field_set:LOGCXX.BatchHeader.podName)
}
inline std::string* BatchHeader::mutable_podname() {
  // @@protoc_insertion_point(field_mutable:LOGCXX.BatchHeader.podName)
  return _internal_mutable_podname();
}
inline const std::string& BatchHeader::_internal_podname() const {
  return podname_.Get();
}
inline void BatchHeader::_internal_set_podname(const std::string& value) {
  
  podname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BatchHeader::set_podname(std::string&& value) {
  
  podname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOGCXX.BatchHeader.podName)
}
inline void BatchHeader::set_podname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  podname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LOGCXX.BatchHeader.podName)
}
inline void BatchHeader::set_podname(const char* value,
    size_t size) {
  
  podname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOGCXX.BatchHeader.podName)
}
inline std::string* BatchHeader::_internal_mutable_podname() {
  
  return podname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BatchHeader::release_podname() {
  // @@protoc_insertion_point(field_release:LOGCXX.BatchHeader.podName)
  return podname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchHeader::set_allocated_podname(std::string* podname) {
  if (podname != nullptr) {
    
  } else {
    
  }
  podname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), podname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOGCXX.BatchHeader.podName)
}

// string stage = 6;
inline void BatchHeader::clear_stage() {
  stage_.ClearToEmpty();
}
inline const std::string& BatchHeader::stage() const {
  // @@protoc_insertion_point(field_get:LOGCXX.BatchHeader.stage)
  return _internal_stage();
}
inline void BatchHeader::set_stage(const std::string& value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:LOGCXX.BatchHeader.stage)
}
inline std::string* BatchHeader::mutable_stage() {
  // @@protoc_insertion_point(field_mutable:LOGCXX.BatchHeader.stage)
  return _internal_mutable_stage();
}
inline const std::string& BatchHeader::_internal_stage() const {
  return stage_.Get();
}
inline void BatchHeader::_internal_set_stage(const std::string& value) {
  
  stage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BatchHeader::set_stage(std::string&& value) {
  
  stage_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOGCXX.BatchHeader.stage)
}
inline void BatchHeader::set_stage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LOGCXX.BatchHeader.stage)
}
inline void BatchHeader::set_stage(const char* value,
    size_t size) {
  
  stage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOGCXX.BatchHeader.stage)
}
inline std::string* BatchHeader::_internal_mutable_stage() {
  
  return stage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BatchHeader::release_stage() {
  // @@protoc_insertion_point(field_release:LOGCXX.BatchHeader.stage)
  return stage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchHeader::set_allocated_stage(std::string* stage) {
  if (stage != nullptr) {
    
  } else {
    
  }
  stage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOGCXX.BatchHeader.stage)
}

// bytes host = 7;
inline void BatchHeader::clear_host() {
  host_.ClearToEmpty();
}
inline const std::string& BatchHeader::host() const {
  // @@protoc_insertion_point(field_get:LOGCXX.BatchHeader.host)
  return _internal_host();
}
inline void BatchHeader::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:LOGCXX.BatchHeader.host)
}
inline std::string* BatchHeader::mutable_host() {
  // @@protoc_insertion_point(field_mutable:LOGCXX.BatchHeader.host)
  return _internal_mutable_host();
}
inline const std::string& BatchHeader::_internal_host() const {
  return host_.Get();
}
inline void BatchHeader::_internal_set_host(const std::string& value) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BatchHeader::set_host(std::string&& value) {
  
  host_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOGCXX.BatchHeader.host)
}
inline void BatchHeader::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LOGCXX.BatchHeader.host)
}
inline void BatchHeader::set_host(const void* value,
    size_t size) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOGCXX.BatchHeader.host)
}
inline std::string* BatchHeader::_internal_mutable_host() {
  
  return host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BatchHeader::release_host() {
  // @@protoc_insertion_point(field_release:LOGCXX.BatchHeader.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchHeader::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOGCXX.BatchHeader.host)
}

// string idc = 8;
inline void BatchHeader::clear_idc() {
  idc_.ClearToEmpty();
}
inline const std::string& BatchHeader::idc() const {
  // @@protoc_insertion_point(field_get:LOGCXX.BatchHeader.idc)
  return _internal_idc();
}
inline void BatchHeader::set_idc(const std::string& value) {
  _internal_set_idc(value);
  // @@protoc_insertion_point(field_set:LOGCXX.BatchHeader.idc)
}
inline std::string* BatchHeader::mutable_idc() {
  // @@protoc_insertion_point(field_mutable:LOGCXX.BatchHeader.idc)
  return _internal_mutable_idc();
}
inline const std::string& BatchHeader::_internal_idc() const {
  return idc_.Get();
}
inline void BatchHeader::_internal_set_idc(const std::string& value) {
  
  idc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BatchHeader::set_idc(std::string&& value) {
  
  idc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOGCXX.BatchHeader.idc)
}
inline void BatchHeader::set_idc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LOGCXX.BatchHeader.idc)
}
inline void BatchHeader::set_idc(const char* value,
    size_t size) {
  
  idc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOGCXX.BatchHeader.idc)
}
inline std::string* BatchHeader::_internal_mutable_idc() {
  
  return idc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BatchHeader::release_idc() {
  // @@protoc_insertion_point(field_release:LOGCXX.BatchHeader.idc)
  return idc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchHeader::set_allocated_idc(std::string* idc) {
  if (idc != nullptr) {
    
  } else {
    
  }
  idc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOGCXX.BatchHeader.idc)
}

// -------------------------------------------------------------------

// MsgLog_KeyValue

// string key = 1;
inline void MsgLog_KeyValue::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& MsgLog_KeyValue::key() const {
  // @@protoc_insertion_point(field_get:LOGCXX.MsgLog.KeyValue.key)
  return _internal_key();
}
inline void MsgLog_KeyValue::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:LOGCXX.MsgLog.KeyValue.key)
}
inline std::string* MsgLog_KeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:LOGCXX.MsgLog.KeyValue.key)
  return _internal_mutable_key();
}
inline const std::string& MsgLog_KeyValue::_internal_key() const {
  return key_.Get();
}
inline void MsgLog_KeyValue::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgLog_KeyValue::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOGCXX.MsgLog.KeyValue.key)
}
inline void MsgLog_KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LOGCXX.MsgLog.KeyValue.key)
}
inline void MsgLog_KeyValue::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOGCXX.MsgLog.KeyValue.key)
}
inline std::string* MsgLog_KeyValue::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgLog_KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:LOGCXX.MsgLog.KeyValue.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgLog_KeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOGCXX.MsgLog.KeyValue.key)
}

// string value = 2;
inline void MsgLog_KeyValue::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& MsgLog_KeyValue::value() const {
  // @@protoc_insertion_point(field_get:LOGCXX.MsgLog.KeyValue.value)
  return _internal_value();
}
inline void MsgLog_KeyValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:LOGCXX.MsgLog.KeyValue.value)
}
inline std::string* MsgLog_KeyValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:LOGCXX.MsgLog.KeyValue.value)
  return _internal_mutable_value();
}
inline const std::string& MsgLog_KeyValue::_internal_value() const {
  return value_.Get();
}
inline void MsgLog_KeyValue::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgLog_KeyValue::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOGCXX.MsgLog.KeyValue.value)
}
inline void MsgLog_KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LOGCXX.MsgLog.KeyValue.value)
}
inline void MsgLog_KeyValue::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOGCXX.MsgLog.KeyValue.value)
}
inline std::string* MsgLog_KeyValue::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgLog_KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:LOGCXX.MsgLog.KeyValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgLog_KeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOGCXX.MsgLog.KeyValue.value)
}

// -------------------------------------------------------------------

// MsgLog

// .LOGCXX.MsgHeader header = 1;
inline bool MsgLog::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MsgLog::has_header() const {
  return _internal_has_header();
}
inline void MsgLog::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::LOGCXX::MsgHeader& MsgLog::_internal_header() const {
  const ::LOGCXX::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::LOGCXX::MsgHeader&>(
      ::LOGCXX::_MsgHeader_default_instance_);
}
inline const ::LOGCXX::MsgHeader& MsgLog::header() const {
  // @@protoc_insertion_point(field_get:LOGCXX.MsgLog.header)
  return _internal_header();
}
inline void MsgLog::unsafe_arena_set_allocated_header(
    ::LOGCXX::MsgHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOGCXX.MsgLog.header)
}
inline ::LOGCXX::MsgHeader* MsgLog::release_header() {
  
  ::LOGCXX::MsgHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LOGCXX::MsgHeader* MsgLog::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:LOGCXX.MsgLog.header)
  
  ::LOGCXX::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::LOGCXX::MsgHeader* MsgLog::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::LOGCXX::MsgHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::LOGCXX::MsgHeader* MsgLog::mutable_header() {
  // @@protoc_insertion_point(field_mutable:LOGCXX.MsgLog.header)
  return _internal_mutable_header();
}
inline void MsgLog::set_allocated_header(::LOGCXX::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:LOGCXX.MsgLog.header)
}

// repeated .LOGCXX.MsgLog.KeyValue tags = 2;
inline int MsgLog::_internal_tags_size() const {
  return tags_.size();
}
inline int MsgLog::tags_size() const {
  return _internal_tags_size();
}
inline void MsgLog::clear_tags() {
  tags_.Clear();
}
inline ::LOGCXX::MsgLog_KeyValue* MsgLog::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:LOGCXX.MsgLog.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOGCXX::MsgLog_KeyValue >*
MsgLog::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:LOGCXX.MsgLog.tags)
  return &tags_;
}
inline const ::LOGCXX::MsgLog_KeyValue& MsgLog::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::LOGCXX::MsgLog_KeyValue& MsgLog::tags(int index) const {
  // @@protoc_insertion_point(field_get:LOGCXX.MsgLog.tags)
  return _internal_tags(index);
}
inline ::LOGCXX::MsgLog_KeyValue* MsgLog::_internal_add_tags() {
  return tags_.Add();
}
inline ::LOGCXX::MsgLog_KeyValue* MsgLog::add_tags() {
  // @@protoc_insertion_point(field_add:LOGCXX.MsgLog.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOGCXX::MsgLog_KeyValue >&
MsgLog::tags() const {
  // @@protoc_insertion_point(field_list:LOGCXX.MsgLog.tags)
  return tags_;
}

// bytes msg = 3;
inline void MsgLog::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& MsgLog::msg() const {
  // @@protoc_insertion_point(field_get:LOGCXX.MsgLog.msg)
  return _internal_msg();
}
inline void MsgLog::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:LOGCXX.MsgLog.msg)
}
inline std::string* MsgLog::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:LOGCXX.MsgLog.msg)
  return _internal_mutable_msg();
}
inline const std::string& MsgLog::_internal_msg() const {
  return msg_.Get();
}
inline void MsgLog::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgLog::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOGCXX.MsgLog.msg)
}
inline void MsgLog::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LOGCXX.MsgLog.msg)
}
inline void MsgLog::set_msg(const void* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOGCXX.MsgLog.msg)
}
inline std::string* MsgLog::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgLog::release_msg() {
  // @@protoc_insertion_point(field_release:LOGCXX.MsgLog.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgLog::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOGCXX.MsgLog.msg)
}

// -------------------------------------------------------------------

// MsgHeader

// string level = 1;
inline void MsgHeader::clear_level() {
  level_.ClearToEmpty();
}
inline const std::string& MsgHeader::level() const {
  // @@protoc_insertion_point(field_get:LOGCXX.MsgHeader.level)
  return _internal_level();
}
inline void MsgHeader::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:LOGCXX.MsgHeader.level)
}
inline std::string* MsgHeader::mutable_level() {
  // @@protoc_insertion_point(field_mutable:LOGCXX.MsgHeader.level)
  return _internal_mutable_level();
}
inline const std::string& MsgHeader::_internal_level() const {
  return level_.Get();
}
inline void MsgHeader::_internal_set_level(const std::string& value) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgHeader::set_level(std::string&& value) {
  
  level_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOGCXX.MsgHeader.level)
}
inline void MsgHeader::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LOGCXX.MsgHeader.level)
}
inline void MsgHeader::set_level(const char* value,
    size_t size) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOGCXX.MsgHeader.level)
}
inline std::string* MsgHeader::_internal_mutable_level() {
  
  return level_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgHeader::release_level() {
  // @@protoc_insertion_point(field_release:LOGCXX.MsgHeader.level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgHeader::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOGCXX.MsgHeader.level)
}

// string location = 2;
inline void MsgHeader::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& MsgHeader::location() const {
  // @@protoc_insertion_point(field_get:LOGCXX.MsgHeader.location)
  return _internal_location();
}
inline void MsgHeader::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:LOGCXX.MsgHeader.location)
}
inline std::string* MsgHeader::mutable_location() {
  // @@protoc_insertion_point(field_mutable:LOGCXX.MsgHeader.location)
  return _internal_mutable_location();
}
inline const std::string& MsgHeader::_internal_location() const {
  return location_.Get();
}
inline void MsgHeader::_internal_set_location(const std::string& value) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgHeader::set_location(std::string&& value) {
  
  location_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOGCXX.MsgHeader.location)
}
inline void MsgHeader::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LOGCXX.MsgHeader.location)
}
inline void MsgHeader::set_location(const char* value,
    size_t size) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOGCXX.MsgHeader.location)
}
inline std::string* MsgHeader::_internal_mutable_location() {
  
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgHeader::release_location() {
  // @@protoc_insertion_point(field_release:LOGCXX.MsgHeader.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgHeader::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOGCXX.MsgHeader.location)
}

// string logID = 3;
inline void MsgHeader::clear_logid() {
  logid_.ClearToEmpty();
}
inline const std::string& MsgHeader::logid() const {
  // @@protoc_insertion_point(field_get:LOGCXX.MsgHeader.logID)
  return _internal_logid();
}
inline void MsgHeader::set_logid(const std::string& value) {
  _internal_set_logid(value);
  // @@protoc_insertion_point(field_set:LOGCXX.MsgHeader.logID)
}
inline std::string* MsgHeader::mutable_logid() {
  // @@protoc_insertion_point(field_mutable:LOGCXX.MsgHeader.logID)
  return _internal_mutable_logid();
}
inline const std::string& MsgHeader::_internal_logid() const {
  return logid_.Get();
}
inline void MsgHeader::_internal_set_logid(const std::string& value) {
  
  logid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgHeader::set_logid(std::string&& value) {
  
  logid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOGCXX.MsgHeader.logID)
}
inline void MsgHeader::set_logid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LOGCXX.MsgHeader.logID)
}
inline void MsgHeader::set_logid(const char* value,
    size_t size) {
  
  logid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOGCXX.MsgHeader.logID)
}
inline std::string* MsgHeader::_internal_mutable_logid() {
  
  return logid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgHeader::release_logid() {
  // @@protoc_insertion_point(field_release:LOGCXX.MsgHeader.logID)
  return logid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgHeader::set_allocated_logid(std::string* logid) {
  if (logid != nullptr) {
    
  } else {
    
  }
  logid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOGCXX.MsgHeader.logID)
}

// int64 ts = 4;
inline void MsgHeader::clear_ts() {
  ts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgHeader::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgHeader::ts() const {
  // @@protoc_insertion_point(field_get:LOGCXX.MsgHeader.ts)
  return _internal_ts();
}
inline void MsgHeader::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ts_ = value;
}
inline void MsgHeader::set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:LOGCXX.MsgHeader.ts)
}

// uint64 spanID = 5;
inline void MsgHeader::clear_spanid() {
  spanid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgHeader::_internal_spanid() const {
  return spanid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgHeader::spanid() const {
  // @@protoc_insertion_point(field_get:LOGCXX.MsgHeader.spanID)
  return _internal_spanid();
}
inline void MsgHeader::_internal_set_spanid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  spanid_ = value;
}
inline void MsgHeader::set_spanid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_spanid(value);
  // @@protoc_insertion_point(field_set:LOGCXX.MsgHeader.spanID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LOGCXX

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
